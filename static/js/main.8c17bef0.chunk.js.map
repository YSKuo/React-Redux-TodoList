{"version":3,"sources":["redux/selectors.js","redux/actionTypes.js","components/Header.js","components/TodoInput.js","redux/actions.js","components/Progress.js","components/TodosControls.js","components/Todo.js","components/Todos.js","components/TodoInfo.js","App.js","redux/reducers/todos.js","redux/reducers/filter.js","redux/reducers/index.js","redux/store.js","serviceWorker.js","index.js"],"names":["selectTodos","store","todoState","todos","selectFilter","filterState","filter","GET_TODOS_FROM_LOCALSTORAGE","ADD_TODO","DELETE_TODO","EDIT_TODO","DELETE_COMPLETED_TODOS","CLICK_CHECKBOX","CHANGE_ALL_TODOS_STATUS","PICK_FILTER","Header","Navbar","bg","variant","expand","Brand","href","MemoButton","memo","className","children","TodoInput","useState","content","setContent","dispatch","useDispatch","onSubmit","e","preventDefault","type","payload","addTodo","name","value","onChange","target","placeholder","MemoProgressBar","percent","style","width","aria-valuemin","aria-valuemax","MemoUncompletedNumber","numUncomplete","Progress","useSelector","numTodos","length","numCompleted","todo","isCompleted","Math","round","MemoFilterRadio","classNames","active","checked","pickFilter","toUpperCase","TodosControls","completeAllToggleText","every","DropdownButton","id","title","Dropdown","Item","onClick","MemoTodo","inputIsCompleted","clickCheckbox","editTodo","deleteTodo","Todos","map","Todo","MemoTodosInfo","App","useEffect","JSON","parse","localStorage","getItem","getTodosFromLocalStorage","setItem","stringify","initialState","initailState","combineReducers","state","action","trim","Date","now","allCompleted","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8c17bef0.chunk.js","sourcesContent":["export const selectTodos = (store) => store.todoState.todos;\nexport const selectFilter = (store) => store.filterState.filter;\n","// 從 localStorage 拿 todos\nexport const GET_TODOS_FROM_LOCALSTORAGE = 'get_todos_from_localStorage';\n\n// 新增/刪除/編輯 todo(s) 內容\nexport const ADD_TODO = 'add_todo';\nexport const DELETE_TODO = 'delete_todo';\nexport const EDIT_TODO = 'edit_todo';\nexport const DELETE_COMPLETED_TODOS = 'delete_completed_todos';\n\n// 改變 todo(s) 完成狀態\nexport const CLICK_CHECKBOX = 'click_checkbox';\nexport const CHANGE_ALL_TODOS_STATUS = 'change_all_todos_status';\n\n// 改變 filter\nexport const PICK_FILTER = 'pick_filter';\n","import React from 'react';\nimport { Navbar } from 'react-bootstrap';\n\nconst Header = () => {\n  return (\n    <header>\n      <Navbar bg=\"primary\" variant=\"dark\" expand=\"md\">\n        <Navbar.Brand href=\"#\">Bucket List</Navbar.Brand>\n      </Navbar>\n    </header>\n  );\n}\n\nexport default Header;","import React, { useState, memo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addTodo } from '../redux/actions';\n\nconst MemoButton = memo(({ className, children }) =>{\n  return (\n    <button className={className}>{children}</button>\n  )\n});\n\nconst TodoInput = () => {\n  const [content, setContent] = useState('');\n  const dispatch = useDispatch();\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dispatch(addTodo(content));\n    setContent('');\n  };\n\n  return (\n    <div className=\"container todo-input-form mt-4 mb-4\">\n      <form className=\"form-row\" onSubmit={handleSubmit}>\n        <div className=\"input-group\">\n          <input\n            type=\"text\" name=\"content\" className=\"form-control\" \n            value={content}\n            onChange={e => setContent(e.target.value)}\n            placeholder=\"What needs to be done?\" \n          />\n          <MemoButton className=\"btn btn-primary\">Submit</MemoButton>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default TodoInput;","import { \n  GET_TODOS_FROM_LOCALSTORAGE,\n  ADD_TODO, \n  DELETE_TODO, \n  EDIT_TODO, \n  DELETE_COMPLETED_TODOS, \n  CLICK_CHECKBOX, \n  CHANGE_ALL_TODOS_STATUS, \n  PICK_FILTER } from './actionTypes';\n\nexport function getTodosFromLocalStorage(todos) {\n  return {\n    type: GET_TODOS_FROM_LOCALSTORAGE,\n    payload: {\n      todos\n    }\n  }\n};\n\nexport function addTodo(content) {\n  return {\n    type: ADD_TODO,\n    payload: {\n      content\n    }\n  }\n};\n\nexport function deleteTodo(id) {\n  return {\n    type: DELETE_TODO,\n    payload: {\n      id\n    }\n  }\n};\n\nexport function editTodo(id, content) {\n  return {\n    type: EDIT_TODO,\n    payload: {\n      id,\n      content\n    }\n  }\n};\n\nexport function deleteCompletedTodos() {\n  return {\n    type: DELETE_COMPLETED_TODOS\n  }\n};\n\nexport function clickCheckbox(id) {\n  return {\n    type: CLICK_CHECKBOX,\n    payload: {\n      id\n    }\n  }\n};\n\nexport function changeAllTodosStatus() {\n  return {\n    type: CHANGE_ALL_TODOS_STATUS\n  }\n};\n\nexport function pickFilter(filter) {\n  return {\n    type: PICK_FILTER,\n    payload: {\n      filter\n    }\n  }\n};\n","import React, { memo, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectTodos } from '../redux/selectors';\n\nconst MemoProgressBar = memo(({ percent }) => {\n  return (\n    <div\n      className=\"progress-bar\"\n      style={{width: percent +'%'}}\n      aria-valuemin=\"0\"\n      aria-valuemax=\"100\"\n    >\n      {percent}%\n    </div>\n  );\n});\n\nconst MemoUncompletedNumber = memo(({ numUncomplete }) => {\n  return (\n    <p>\n      <span>\n        {numUncomplete}\n      </span> item(s) left\n    </p>\n  );\n});\n\nconst Progress = () => {\n  const todos = useSelector(selectTodos);\n\n  // 進度顯示項目的計算\n  const numTodos = todos.length;\n  const numCompleted = todos.filter(todo => todo.isCompleted).length;\n  const numUncomplete = todos.filter(todo => !todo.isCompleted).length;\n  let percent;\n  if (numTodos === 0) {\n    percent = 0;\n  } else {\n    percent = Math.round(numCompleted / numTodos * 10000) / 100;\n  }\n  \n  return (\n    <div>\n      <h5>Your Progress</h5>\n      <div className=\"progress\">\n        <MemoProgressBar percent={percent} />\n      </div>\n      <MemoUncompletedNumber numUncomplete={numUncomplete} />\n    </div>\n  );\n};\n\nexport default Progress;","import React, { memo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectTodos, selectFilter } from '../redux/selectors';\nimport { deleteCompletedTodos, changeAllTodosStatus, pickFilter } from '../redux/actions';\nimport { DropdownButton, Dropdown } from 'react-bootstrap';\nimport classNames from 'classnames';\n\nconst MemoFilterRadio = memo(({ filter }) => {\n  const dispatch = useDispatch();\n  const filterState = useSelector(selectFilter);\n\n  return (\n    <label className={classNames('btn btn-secondary', {active: filterState === filter})}>\n      <input type=\"radio\" name=\"filter\" value={filter} \n        checked={filterState === filter}\n        onChange={(e) => dispatch(pickFilter(e.target.value))} \n      />\n      {filter.toUpperCase()}\n    </label>\n  );\n});\n\nconst TodosControls = () => {\n  const todos = useSelector(selectTodos);\n  const dispatch = useDispatch();\n  const completeAllToggleText = todos.every((todo) => todo.isCompleted) ? 'Uncomplete all' : 'Complete all';\n\n  return (\n    <div className=\"row todos__controls justify-content-between\">\n      <div className=\"btn-group btn-group-toggle mt-2\" >\n        <MemoFilterRadio filter='all' />\n        <MemoFilterRadio filter='active' />\n        <MemoFilterRadio filter='completed' />\n      </div>\n\n      <DropdownButton className=\"dropdown mt-2\" id=\"dropdown-basic-button\" title=\"ACTIONS\">\n        <Dropdown.Item onClick={(e) => dispatch(changeAllTodosStatus())}>\n          {completeAllToggleText}\n        </Dropdown.Item>\n        <Dropdown.Item onClick={(e) => dispatch(deleteCompletedTodos())}>\n          Clear completed\n        </Dropdown.Item>\n      </DropdownButton>\n    </div>\n  );\n};\n\nexport default TodosControls;","import React, { memo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteTodo, clickCheckbox, editTodo } from '../redux/actions';\nimport classNames from 'classnames';\n\nconst MemoTodo = memo(({ todo }) => {\n  const { id, content, isCompleted } = todo;\n  const inputIsCompleted = classNames('todo__input form-control', {'todo__input-completed': isCompleted});\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"todo input-group mb-1\">\n      <div className=\"input-group-prepend\">\n        <div className=\"input-group-text\">\n          <input \n            type=\"checkbox\" \n            checked={isCompleted}\n            onChange={() => dispatch(clickCheckbox(id))}\n          />\n        </div>\n      </div>\n      <input \n        type=\"text\" \n        className={inputIsCompleted} \n        value={content}\n        onChange={(e) => dispatch(editTodo(id, e.target.value))}\n      />\n      <button\n        type=\"button\" \n        className=\"clear-btn btn btn-outline-danger\" \n        onClick={() => dispatch(deleteTodo(id))}\n      >\n        Clear\n      </button>\n    </div>\n  );\n});\n\nexport default MemoTodo;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectTodos, selectFilter } from '../redux/selectors';\n\nimport Todo from './Todo';\n\nconst Todos = () => {\n  const todos = useSelector(selectTodos);\n  const filter = useSelector(selectFilter);\n  \n  return (\n    <section className=\"todos mt-4\">\n    {\n      todos\n        .filter(todo => {\n          if (filter === 'all') return true\n          return filter === 'completed' ? todo.isCompleted : !todo.isCompleted\n        })\n        .map(todo => (\n          <Todo\n            key={todo.id}\n            todo={todo}\n          />\n          )\n        )\n    }\n    </section>\n  )\n};\n\nexport default Todos;\n","import React, { memo } from 'react';\nimport Progress from './Progress';\nimport TodosControls from './TodosControls';\nimport Todos from './Todos';\n\nconst MemoTodosInfo = memo(() => {\n  return (\n    <div className=\"container\">\n      <Progress />\n      <TodosControls />\n      <Todos />\n    </div>\n  );\n});\n\nexport default MemoTodosInfo;","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectTodos } from \"./redux/selectors\";\nimport { getTodosFromLocalStorage } from \"./redux/actions\";\nimport Header from \"./components/Header\";\nimport TodoInput from \"./components/TodoInput\";\nimport TodosInfo from \"./components/TodoInfo\";\n\nfunction App() {\n  const todos = useSelector(selectTodos);\n  const dispatch = useDispatch();\n\n  // 把 localStorage 的 todos 拿出來放到 store 裡\n  useEffect(() => {\n    const todos = JSON.parse(localStorage.getItem(\"todos\"));\n\n    if (todos) {\n      dispatch(getTodosFromLocalStorage(todos));\n    }\n  }, []);\n\n  // 每次 todos 有更新就把 todos 放到 localStorage\n  useEffect(() => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  }, [todos]);\n\n  return (\n    <>\n      <Header />\n      <TodoInput />\n      <TodosInfo />\n    </>\n  );\n}\n\nexport default App;\n","import {\n  GET_TODOS_FROM_LOCALSTORAGE, \n  ADD_TODO, \n  DELETE_TODO, \n  EDIT_TODO, \n  DELETE_COMPLETED_TODOS, \n  CLICK_CHECKBOX, \n  CHANGE_ALL_TODOS_STATUS } from '../actionTypes';\n\nconst initialState = {\n  todos: []\n};\n\nexport default function todosReducer(state = initialState, action) {\n  switch(action.type) {\n    case GET_TODOS_FROM_LOCALSTORAGE: {\n      return {\n        todos: action.payload.todos\n      }\n    }\n    case ADD_TODO: {\n      const content = action.payload.content.trim();\n      if (content) {\n        return {\n          ...state,\n          todos: [...state.todos, {\n            id: Date.now(),\n            content,\n            isCompleted: false,\n          }]\n        }\n      }\n      return state;\n    }\n    case DELETE_TODO: {\n      return {\n        ...state,\n        todos: state.todos\n          .filter(todo => todo.id !== action.payload.id)\n      }\n    }\n    case EDIT_TODO: {\n      return {\n        ...state,\n        todos: state.todos.map(todo => {\n          // id 吻合就放上新的 content\n          if (todo.id === action.payload.id) {\n            return {\n              ...todo,\n              content: action.payload.content\n            }\n          }\n          // id 不吻合就不進行改變直接回傳\n          return todo;\n        })\n      }\n    }\n    case DELETE_COMPLETED_TODOS: {\n      return {\n        ...state,\n        todos: state.todos.filter(todo => !todo.isCompleted)\n      }\n    }\n    case CLICK_CHECKBOX: {\n      return {\n        ...state,\n        todos: state.todos.map(todo => {\n          if (todo.id === action.payload.id) {\n            return {\n              ...todo,\n              isCompleted: !todo.isCompleted\n            }\n          }\n          return todo\n        })\n      }\n    }\n    case CHANGE_ALL_TODOS_STATUS: {\n      const allCompleted = state.todos\n        .every(todo => todo.isCompleted);\n      return {\n        ...state,\n        todos: state.todos.map(todo => ({\n          ...todo,\n          isCompleted: !allCompleted\n        }))\n      }\n    }\n    default: {\n      return state;\n    }\n  }\n};\n","import { PICK_FILTER } from '../actionTypes';\n\nconst initailState = {\n  filter: 'all'\n};\n\nexport default function filterReducer(state = initailState, action) {\n  if (action.type === PICK_FILTER) {\n    return {\n      ...state,\n      filter: action.payload.filter\n    }\n  }\n  return state;\n};","import { combineReducers } from 'redux';\nimport todos from './todos';\nimport filter from './filter';\n\nexport default combineReducers({\n  todoState: todos,\n  filterState: filter\n});","import { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nexport default createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport store from './redux/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}